{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to the Skyrim Community Shaders Documentation!</p>"},{"location":"#current-list-of-features-and-versions","title":"Current list of features and versions","text":"<p>Please ensure you match this to avoid compilation errors.</p> <p></p> Object Feature CS ENB CS VR ENB VR Grass Grass Collisions Yes Yes Yes No Grass Lighting Yes Yes Yes No Water Water Parallax Yes Yes Yes No Water Blending Yes Yes Yes Water caustic Yes No Yes No Screen Space Reflections Yes Yes Yes No Lights Particle Lights Yes Yes Yes Yes Light Limit Fix Yes No Yes No Indirect Lighting / SSGI Yes Yes Yes Tree LoD Lighting Yes No Yes No Shadows Normalmap Shadows No Yes No Yes Screen-Space Shadows Yes Yes Yes Yes Distant Shadows Yes Yes Yes Ambient Occlusion Beta Yes Beta Yes Rain Wet Surfaces Yes Yes Yes Yes Puddles Yes No Yes No Dynamic rain drops WIP No Yes No Sky Sun Rays Beta Yes Yes Yes Sun Glare No Yes Yes Volumetric Rays Beta Yes Yes Yes Procedural Sun WIP Yes Yes Cloud Shadows Beta Yes Beta Yes Skylighting No Yes Beta Terrain Terrain Parallax Yes Yes Yes No Terrain Blending Beta Yes Yes No Actors Skin Specular WIP Yes Yes Subsurface Scattering Yes Yes Yes Yes Objects Object Parallax Yes Yes Yes Yes Physically Based Rendering Yes No Yes No Dynamic Cubemaps Yes Yes Yes Yes Screen effects Depth of Field No Yes n.a. n.a. Bloom Yes Yes Yes Yes HDR Yes Yes Yes Yes Adaptation Yes Yes Yes Yes Performance Upscaling Technologies Beta No* WIP No* FSR AA / DLAA Yes No* Yes No* Framegen (DLSS) Beta No No No <p>* can be achieved via 3rd party mod</p> <p>A graph of potential future features, no gaurantee: <pre><code>graph LR;\n    Def[Deferred]\n    Post[Postprocessing]\n    TerraBlend[Terrain Blending]\n    SSS[Subsurface Scattering]\n    SSIL[SSAO/IL]\n    Skylighting\n    TOD[TOD/Weather]\n    VHDR[VHDR Revamp]\n    HFog[Simple Height Fog]\n    PhySky[Physical Sky]\n    MiscWeather[Misc. Weather Elements]\n    Vol[Volumetrics Fog/Clouds]\n    PBR\n    MB[Motion Blur]\n    Water[Better Water]\n    Sparkly[Sparkly Snow]\n    Snow[Better Snow]\n    RT[Full Ray Tracing]\n    DOF[Depth of Field]\n    Bloom[Better Bloom]\n    WP[Water Parallax]\n    SSR[Better SSR]\n\n    SSS--&gt;Snow\n    Sparkly--&gt;Snow\n    Def--&gt;SSS;\n    Def--&gt;SSIL--&gt;Skylighting\n    Def--&gt;Water\n    Def--&gt;SSR\n    Def--&gt;TerraBlend\n    PBR--&gt;Sparkly\n    PBR--&gt;Water\n    TOD--&gt;PhySky\n    TOD--&gt;MiscWeather\n    TOD--&gt;HFog\n    TOD--&gt;Vol\n    Post--&gt;MB\n    Post--&gt;DOF\n    Post--&gt;VHDR--&gt;Bloom\n    Post--&gt;TOD\n    WP--&gt;Water</code></pre></p>"},{"location":"#testing","title":"Testing","text":""},{"location":"#ab-testing","title":"A/B Testing","text":"<p>For those who want to compare visuals with different settings, there is a mode to automatically switch between two modes on an interval. 1. Set up A environment by selecting \"Save Settings\". This is your default settings under <code>CommunityShadersUSER.json</code> and will display as <code>User Mode</code>. 2. Change settings for the B environment for whatever features you want. This will display as <code>Test Mode</code>. 3. Under the <code>Advanced</code> menu, find the slider for <code>Test Interval</code>.</p> <p></p> <ol> <li>Set the interval to any non-zero value. This is the number of seconds to stay in any mode before switching. This will create a new config file, <code>CommunityShadersTEST.json</code>. In the desktop window, you should see a countdown in the top left. You can also monitor the settings changed in 2 to confirm they are changing back and forth.</li> </ol> <p></p> <ol> <li>To exit the A/B test, set <code>Test Interval</code> to 0. You will still have your settings from step 2.</li> <li>To restore your default settings, select \"Load Settings\".</li> </ol>"},{"location":"#dynamic-cubemaps","title":"Dynamic Cubemaps","text":"<p>There is a special test mode that can be activated to turn basically any cubemap surface into a maximum reflective surface. Examples are potions or wine bottles.  1. Under Advanced -&gt; Shader Defines, enter <code>TESTCUBEMAP</code>. 2. Clear Disk Cache, if disk cache enabled. 3. Clear Shader Cache. 4. Examine an object and the environment should be reflected in the item.</p>"},{"location":"Buffers/","title":"Buffers","text":"Register Feature Type Name File Register Type Buffer Type Number PSHADER VSHADER VR b0 Dynamic Cubemaps <code>cbuffer</code> SpecularMapFilterSettings /features/Dynamic Cubemaps/Shaders/DynamicCubemaps/SpecularIrradianceCS.hlsl:14 CBV b 0 True False False b0 Dynamic Cubemaps <code>cbuffer</code> PerFrame /features/Dynamic Cubemaps/Shaders/DynamicCubemaps/UpdateCubemapCS.hlsl:50 CBV b 0 True False False b0 Grass Lighting <code>cbuffer</code> PerFrame /features/Grass Lighting/Shaders/RunGrass.hlsl:228 CBV b 0 True False False b0 Light Limit Fix <code>cbuffer</code> PerFrame /features/Light Limit Fix/Shaders/LightLimitFix/ClusterBuildingCS.hlsl:3 CBV b 0 True False False b0 Light Limit Fix <code>cbuffer</code> PerFrame /features/Light Limit Fix/Shaders/LightLimitFix/ClusterCullingCS.hlsl:3 CBV b 0 True False False b0 Skylighting <code>cbuffer</code> PerFrame /features/Skylighting/Shaders/Skylighting/SkylightingCS.hlsl:37 CBV b 0 True False False b0 DistantTree <code>cbuffer</code> PerTechnique /package/Shaders/DistantTree.hlsl:136 CBV b 0 True False False b0 DistantTree <code>cbuffer</code> PerTechnique /package/Shaders/DistantTree.hlsl:42 CBV b 0 False True False b0 Effect <code>cbuffer</code> PerTechnique /package/Shaders/Effect.hlsl:115 CBV b 0 False True False b0 Effect <code>cbuffer</code> PerTechnique /package/Shaders/Effect.hlsl:456 CBV b 0 True False False b0 Lighting <code>cbuffer</code> PerTechnique /package/Shaders/Lighting.hlsl:106 CBV b 0 False True False b0 Lighting <code>cbuffer</code> PerTechnique /package/Shaders/Lighting.hlsl:566 CBV b 0 True False False b0 Particle <code>cbuffer</code> PerTechnique /package/Shaders/Particle.hlsl:27 CBV b 0 False True False b0 CopyShadowData <code>cbuffer</code> PerFrame /package/Shaders/ShadowTest/CopyShadowData.hlsl:23 CBV b 0 True False False b0 Utility <code>cbuffer</code> PerTechnique /package/Shaders/Utility.hlsl:307 CBV b 0 True False False b0 Utility <code>cbuffer</code> PerTechnique /package/Shaders/Utility.hlsl:82 CBV b 0 False True False b0 Water <code>cbuffer</code> PerTechnique /package/Shaders/Water.hlsl:283 CBV b 0 True False False b0 Water <code>cbuffer</code> PerTechnique /package/Shaders/Water.hlsl:82 CBV b 0 False True False b1 Dynamic Cubemaps <code>cbuffer</code> UpdateData /features/Dynamic Cubemaps/Shaders/DynamicCubemaps/UpdateCubemapCS.hlsl:99 CBV b 1 True False False b1 Screen Space GI <code>cbuffer</code> SSGICB /features/Screen Space GI/Shaders/ScreenSpaceGI/common.hlsli:51 CBV b 1 True False False b1 Screen-Space Shadows <code>cbuffer</code> PerFrame /features/Screen-Space Shadows/Shaders/ScreenSpaceShadows/RaymarchCS.hlsl:10 CBV b 1 True False False b1 Subsurface Scattering <code>cbuffer</code> PerFrameSSS /features/Subsurface Scattering/Shaders/SubsurfaceScattering/SeparableSSSCS.hlsl:9 CBV b 1 True False False b1 Effect <code>cbuffer</code> PerMaterial /package/Shaders/Effect.hlsl:122 CBV b 1 False True False b1 Effect <code>cbuffer</code> PerMaterial /package/Shaders/Effect.hlsl:463 CBV b 1 True False False b1 Lighting <code>cbuffer</code> PerMaterial /package/Shaders/Lighting.hlsl:573 CBV b 1 True False False b1 CopyShadowData <code>cbuffer</code> PerFrame2 /package/Shaders/ShadowTest/CopyShadowData.hlsl:37 CBV b 1 True False False b1 Utility <code>cbuffer</code> PerMaterial /package/Shaders/Utility.hlsl:316 CBV b 1 True False False b1 Utility <code>cbuffer</code> PerMaterial /package/Shaders/Utility.hlsl:93 CBV b 1 False True False b1 Water <code>cbuffer</code> PerMaterial /package/Shaders/Water.hlsl:300 CBV b 1 True False False b1 Water <code>cbuffer</code> PerMaterial /package/Shaders/Water.hlsl:91 CBV b 1 False True False b2 BloodSplatter <code>cbuffer</code> PerGeometry /package/Shaders/BloodSplatter.hlsl:18 CBV b 2 False True False b2 BloodSplatter <code>cbuffer</code> PerGeometry /package/Shaders/BloodSplatter.hlsl:63 CBV b 2 True False False b2 DistantTree <code>cbuffer</code> PerGeometry /package/Shaders/DistantTree.hlsl:47 CBV b 2 False True False b2 Effect <code>cbuffer</code> PerGeometry /package/Shaders/Effect.hlsl:129 CBV b 2 False True False b2 Effect <code>cbuffer</code> PerGeometry /package/Shaders/Effect.hlsl:470 CBV b 2 True False False b2 Lighting <code>cbuffer</code> PerGeometry /package/Shaders/Lighting.hlsl:128 CBV b 2 False True False b2 Lighting <code>cbuffer</code> PerGeometry /package/Shaders/Lighting.hlsl:593 CBV b 2 True False False b2 Particle <code>cbuffer</code> PerGeometry /package/Shaders/Particle.hlsl:205 CBV b 2 True False False b2 Particle <code>cbuffer</code> PerGeometry /package/Shaders/Particle.hlsl:32 CBV b 2 False True False b2 RunGrass <code>cbuffer</code> PerGeometry /package/Shaders/RunGrass.hlsl:30 CBV b 2 False True False b2 CopyShadowData <code>cbuffer</code> PerFrame3 /package/Shaders/ShadowTest/CopyShadowData.hlsl:86 CBV b 2 True False False b2 Sky <code>cbuffer</code> PerGeometry /package/Shaders/Sky.hlsl:140 CBV b 2 True False False b2 Sky <code>cbuffer</code> PerGeometry /package/Shaders/Sky.hlsl:43 CBV b 2 False True False b2 Utility <code>cbuffer</code> PerGeometry /package/Shaders/Utility.hlsl:322 CBV b 2 True False False b2 Utility <code>cbuffer</code> PerGeometry /package/Shaders/Utility.hlsl:98 CBV b 2 False True False b2 Water <code>cbuffer</code> PerGeometry /package/Shaders/Water.hlsl:101 CBV b 2 False True False b2 Water <code>cbuffer</code> PerGeometry /package/Shaders/Water.hlsl:318 CBV b 2 True False False b3 Grass Lighting <code>cbuffer</code> PerGeometry /features/Grass Lighting/Shaders/RunGrass.hlsl:54 CBV b 3 True False False b4 Permutation <code>cbuffer</code> PerShader /package/Shaders/Common/Permutation.hlsl:43 CBV b 4 True False False b4 Effect <code>cbuffer</code> PerShader /package/Shaders/Effect.hlsl:43 CBV b 4 True False False b4 Lighting <code>cbuffer</code> PerShader /package/Shaders/Lighting.hlsl:43 CBV b 4 True False False b4 RunGrass <code>cbuffer</code> PerShader /package/Shaders/RunGrass.hlsl:43 CBV b 4 True False False b4 Water <code>cbuffer</code> PerShader /package/Shaders/Water.hlsl:43 CBV b 4 True False False b5 Grass Collision <code>cbuffer</code> GrassCollisionPerFrame /features/Grass Collision/Shaders/GrassCollision/GrassCollision.hlsli:6 CBV b 5 True False False b5 SharedData <code>cbuffer</code> SharedData /package/Shaders/Common/SharedData.hlsli:9 CBV b 5 True False False b5 DistantTree <code>cbuffer</code> SharedData /package/Shaders/DistantTree.hlsl:9 CBV b 5 True False False b5 Effect <code>cbuffer</code> SharedData /package/Shaders/Effect.hlsl:9 CBV b 5 True False False b5 Lighting <code>cbuffer</code> SharedData /package/Shaders/Lighting.hlsl:9 CBV b 5 True False False b5 RunGrass <code>cbuffer</code> SharedData /package/Shaders/RunGrass.hlsl:9 CBV b 5 True False False b5 Sky <code>cbuffer</code> SharedData /package/Shaders/Sky.hlsl:9 CBV b 5 True False False b5 Water <code>cbuffer</code> SharedData /package/Shaders/Water.hlsl:9 CBV b 5 True False False b6 SharedData <code>cbuffer</code> FeatureData /package/Shaders/Common/SharedData.hlsli:121 CBV b 6 True False False b6 DistantTree <code>cbuffer</code> FeatureData /package/Shaders/DistantTree.hlsl:121 CBV b 6 True False False b6 Effect <code>cbuffer</code> FeatureData /package/Shaders/Effect.hlsl:121 CBV b 6 True False False b6 Lighting <code>cbuffer</code> FeatureData /package/Shaders/Lighting.hlsl:121 CBV b 6 True False False b6 RunGrass <code>cbuffer</code> FeatureData /package/Shaders/RunGrass.hlsl:121 CBV b 6 True False False b6 Sky <code>cbuffer</code> FeatureData /package/Shaders/Sky.hlsl:121 CBV b 6 True False False b6 Water <code>cbuffer</code> FeatureData /package/Shaders/Water.hlsl:121 CBV b 6 True False False b7 Grass Lighting <code>cbuffer</code> cb7 /features/Grass Lighting/Shaders/RunGrass.hlsl:103 CBV b 7 False True False b7 RunGrass <code>cbuffer</code> cb7 /package/Shaders/RunGrass.hlsl:49 CBV b 7 False True False b7 Water <code>cbuffer</code> PerWaterType /package/Shaders/Water.hlsl:26 CBV b 7 True False False b8 Grass Lighting <code>cbuffer</code> cb8 /features/Grass Lighting/Shaders/RunGrass.hlsl:108 CBV b 8 False True False b8 Skylighting <code>cbuffer</code> SkylightingData /features/Skylighting/Shaders/Skylighting/Skylighting.hlsli:4 CBV b 8 True False False b8 RunGrass <code>cbuffer</code> cb8 /package/Shaders/RunGrass.hlsl:54 CBV b 8 False True False b9 Skinned <code>cbuffer</code> PreviousBonesBuffer /package/Shaders/Common/Skinned.hlsli:1 CBV b 9 True False False b10 Skinned <code>cbuffer</code> BonesBuffer /package/Shaders/Common/Skinned.hlsli:6 CBV b 10 True False False b10 Effect <code>cbuffer</code> BonesBuffer /package/Shaders/Effect.hlsl:6 CBV b 10 True False False b10 Lighting <code>cbuffer</code> BonesBuffer /package/Shaders/Lighting.hlsl:6 CBV b 10 True False False b10 Utility <code>cbuffer</code> BonesBuffer /package/Shaders/Utility.hlsl:6 CBV b 10 True False False b11 Grass Lighting <code>cbuffer</code> AlphaTestRefCB /features/Grass Lighting/Shaders/RunGrass.hlsl:236 CBV b 11 True False False b11 AmbientCompositeCS <code>cbuffer</code> PerFrameDeferredShared /package/Shaders/AmbientCompositeCS.hlsl:1 CBV b 11 True False False b11 DeferredShared <code>cbuffer</code> PerFrameDeferredShared /package/Shaders/Common/DeferredShared.hlsli:1 CBV b 11 True False False b11 DeferredCompositeCS <code>cbuffer</code> PerFrameDeferredShared /package/Shaders/DeferredCompositeCS.hlsl:1 CBV b 11 True False False b11 DistantTree <code>cbuffer</code> AlphaTestRefCB /package/Shaders/DistantTree.hlsl:123 CBV b 11 True False False b11 Effect <code>cbuffer</code> IndexedTexcoordBuffer /package/Shaders/Effect.hlsl:148 CBV b 11 False True False b11 Effect <code>cbuffer</code> AlphaTestRefCB /package/Shaders/Effect.hlsl:450 CBV b 11 True False False b11 Lighting <code>cbuffer</code> AlphaTestRefBuffer /package/Shaders/Lighting.hlsl:635 CBV b 11 True False False b11 RunGrass <code>cbuffer</code> AlphaTestRefCB /package/Shaders/RunGrass.hlsl:167 CBV b 11 True False False b11 Sky <code>cbuffer</code> AlphaTestRefCB /package/Shaders/Sky.hlsl:145 CBV b 11 True False False b11 Utility <code>cbuffer</code> AlphaTestRefCB /package/Shaders/Utility.hlsl:354 CBV b 11 True False False b12 FrameBuffer <code>cbuffer</code> PerFrame /package/Shaders/Common/FrameBuffer.hlsl:1 CBV b 12 True False False b12 DistantTree <code>cbuffer</code> PerFrame /package/Shaders/DistantTree.hlsl:129 CBV b 12 True False False b12 DistantTree <code>cbuffer</code> PerFrame /package/Shaders/DistantTree.hlsl:1 CBV b 12 True False False b12 Effect <code>cbuffer</code> PerFrame /package/Shaders/Effect.hlsl:1 CBV b 12 True False False b12 Effect <code>cbuffer</code> VS_PerFrame /package/Shaders/Effect.hlsl:92 CBV b 12 False True False b12 Lighting <code>cbuffer</code> VS_PerFrame /package/Shaders/Lighting.hlsl:153 CBV b 12 False True False b12 Lighting <code>cbuffer</code> PerFrame /package/Shaders/Lighting.hlsl:1 CBV b 12 True False False b12 RunGrass <code>cbuffer</code> PerFrame /package/Shaders/RunGrass.hlsl:1 CBV b 12 True False False b12 Sky <code>cbuffer</code> PerFrame /package/Shaders/Sky.hlsl:1 CBV b 12 True False False b12 Utility <code>cbuffer</code> PerFrame /package/Shaders/Utility.hlsl:1 CBV b 12 True False False b12 Water <code>cbuffer</code> PerFrame /package/Shaders/Water.hlsl:1 CBV b 12 True False False b13 AmbientCompositeCS <code>cbuffer</code> VRValues /package/Shaders/AmbientCompositeCS.hlsl:4 CBV b 13 True False True b13 VR <code>cbuffer</code> VRValues /package/Shaders/Common/VR.hlsli:4 CBV b 13 True False True b13 DeferredCompositeCS <code>cbuffer</code> VRValues /package/Shaders/DeferredCompositeCS.hlsl:4 CBV b 13 True False True b13 DistantTree <code>cbuffer</code> VRValues /package/Shaders/DistantTree.hlsl:4 CBV b 13 True False True b13 Effect <code>cbuffer</code> VRValues /package/Shaders/Effect.hlsl:4 CBV b 13 True False True b13 Lighting <code>cbuffer</code> VRValues /package/Shaders/Lighting.hlsl:4 CBV b 13 True False True b13 RunGrass <code>cbuffer</code> VRValues /package/Shaders/RunGrass.hlsl:4 CBV b 13 True False True b13 Sky <code>cbuffer</code> VRValues /package/Shaders/Sky.hlsl:4 CBV b 13 True False True b13 Utility <code>cbuffer</code> VRValues /package/Shaders/Utility.hlsl:4 CBV b 13 True False True b13 Water <code>cbuffer</code> VRValues /package/Shaders/Water.hlsl:4 CBV b 13 True False True s0 Dynamic Cubemaps <code>SamplerState</code> LinearSampler /features/Dynamic Cubemaps/Shaders/DynamicCubemaps/InferCubemapCS.hlsl:7 Sampler s 0 True False False s0 Dynamic Cubemaps <code>SamplerState</code> linear_wrap_sampler /features/Dynamic Cubemaps/Shaders/DynamicCubemaps/SpecularIrradianceCS.hlsl:22 Sampler s 0 True False False s0 Dynamic Cubemaps <code>SamplerState</code> LinearSampler /features/Dynamic Cubemaps/Shaders/DynamicCubemaps/UpdateCubemapCS.hlsl:10 Sampler s 0 True False False s0 Grass Lighting <code>SamplerState</code> SampBaseSampler /features/Grass Lighting/Shaders/RunGrass.hlsl:222 Sampler s 0 True False False s0 Screen Space GI <code>SamplerState</code> samplerPointClamp /features/Screen Space GI/Shaders/ScreenSpaceGI/common.hlsli:94 Sampler s 0 True False False s0 Screen-Space Shadows <code>SamplerState</code> PointBorderSampler /features/Screen-Space Shadows/Shaders/ScreenSpaceShadows/RaymarchCS.hlsl:8 Sampler s 0 True False False s0 Skylighting <code>SamplerState</code> LinearSampler /features/Skylighting/Shaders/Skylighting/SkylightingCS.hlsl:44 Sampler s 0 True False False s0 BloodSplatter <code>SamplerState</code> SampBloodColor /package/Shaders/BloodSplatter.hlsl:53 Sampler s 0 True False False s0 DistantTree <code>SamplerState</code> SampDiffuse /package/Shaders/DistantTree.hlsl:118 Sampler s 0 True False False s0 Effect <code>SamplerState</code> SampBaseSampler /package/Shaders/Effect.hlsl:406 Sampler s 0 True False False s0 Lighting <code>SamplerState</code> SampColorSampler /package/Shaders/Lighting.hlsl:444 Sampler s 0 True False False s0 Particle <code>SamplerState</code> SampSourceTexture /package/Shaders/Particle.hlsl:187 Sampler s 0 True False False s0 RunGrass <code>SamplerState</code> SampBaseSampler /package/Shaders/RunGrass.hlsl:161 Sampler s 0 True False False s0 Sky <code>SamplerState</code> SampBaseSampler /package/Shaders/Sky.hlsl:132 Sampler s 0 True False False s0 Utility <code>SamplerState</code> SampBaseSampler /package/Shaders/Utility.hlsl:289 Sampler s 0 True False False s0 Water <code>SamplerState</code> ReflectionSampler /package/Shaders/Water.hlsl:257 Sampler s 0 True False False s1 Grass Lighting <code>SamplerState</code> SampShadowMaskSampler /features/Grass Lighting/Shaders/RunGrass.hlsl:223 Sampler s 1 True False False s1 Screen Space GI <code>SamplerState</code> samplerLinearClamp /features/Screen Space GI/Shaders/ScreenSpaceGI/common.hlsli:95 Sampler s 1 True False False s1 Skylighting <code>SamplerComparisonState</code> ShadowSamplerPCF /features/Skylighting/Shaders/Skylighting/SkylightingCS.hlsl:45 Sampler s 1 True False False s1 BloodSplatter <code>SamplerState</code> SampBloodAlpha /package/Shaders/BloodSplatter.hlsl:54 Sampler s 1 True False False s1 Effect <code>SamplerState</code> SampNormalSampler /package/Shaders/Effect.hlsl:407 Sampler s 1 True False False s1 Lighting <code>SamplerState</code> SampTerrainParallaxSampler /package/Shaders/Lighting.hlsl:424 Sampler s 1 True False False s1 RunGrass <code>SamplerState</code> SampShadowMaskSampler /package/Shaders/RunGrass.hlsl:162 Sampler s 1 True False False s1 Sky <code>SamplerState</code> SampBlendSampler /package/Shaders/Sky.hlsl:133 Sampler s 1 True False False s1 Utility <code>SamplerState</code> SampNormalSampler /package/Shaders/Utility.hlsl:290 Sampler s 1 True False False s1 Water <code>SamplerState</code> RefractionSampler /package/Shaders/Water.hlsl:258 Sampler s 1 True False False s2 BloodSplatter <code>SamplerState</code> SampFlareColor /package/Shaders/BloodSplatter.hlsl:55 Sampler s 2 True False False s2 Effect <code>SamplerState</code> SampNoiseSampler /package/Shaders/Effect.hlsl:408 Sampler s 2 True False False s2 Sky <code>SamplerState</code> SampNoiseGradSampler /package/Shaders/Sky.hlsl:134 Sampler s 2 True False False s2 Utility <code>SamplerState</code> SampDepthSampler /package/Shaders/Utility.hlsl:291 Sampler s 2 True False False s2 Water <code>SamplerState</code> DisplacementSampler /package/Shaders/Water.hlsl:259 Sampler s 2 True False False s3 BloodSplatter <code>SamplerState</code> SampFlareHDR /package/Shaders/BloodSplatter.hlsl:56 Sampler s 3 True False False s3 Effect <code>SamplerState</code> SampDepthSampler /package/Shaders/Effect.hlsl:409 Sampler s 3 True False False s3 Utility <code>SamplerState</code> SampShadowMapSampler /package/Shaders/Utility.hlsl:292 Sampler s 3 True False False s3 Water <code>SamplerState</code> CubeMapSampler /package/Shaders/Water.hlsl:260 Sampler s 3 True False False s4 Effect <code>SamplerState</code> SampGrayscaleSampler /package/Shaders/Effect.hlsl:410 Sampler s 4 True False False s4 Utility <code>SamplerComparisonState</code> SampShadowMapSamplerComp /package/Shaders/Utility.hlsl:293 Sampler s 4 True False False s4 Water <code>SamplerState</code> Normals01Sampler /package/Shaders/Water.hlsl:261 Sampler s 4 True False False s5 Utility <code>SamplerState</code> SampStencilSampler /package/Shaders/Utility.hlsl:294 Sampler s 5 True False False s5 Water <code>SamplerState</code> Normals02Sampler /package/Shaders/Water.hlsl:262 Sampler s 5 True False False s6 Lighting <code>SamplerState</code> SampGlowSampler /package/Shaders/Lighting.hlsl:465 Sampler s 6 True False False s6 Utility <code>SamplerComparisonState</code> SampFocusShadowMapSamplerComp /package/Shaders/Utility.hlsl:295 Sampler s 6 True False False s6 Water <code>SamplerState</code> Normals03Sampler /package/Shaders/Water.hlsl:263 Sampler s 6 True False False s7 Utility <code>SamplerState</code> SampGrayscaleSampler /package/Shaders/Utility.hlsl:296 Sampler s 7 True False False s7 Water <code>SamplerState</code> DepthSampler /package/Shaders/Water.hlsl:264 Sampler s 7 True False False s8 Water <code>SamplerState</code> FlowMapSampler /package/Shaders/Water.hlsl:265 Sampler s 8 True False False s9 Lighting <code>SamplerState</code> SampBackLightSampler /package/Shaders/Lighting.hlsl:473 Sampler s 9 True False False s9 Water <code>SamplerState</code> FlowMapNormalsSampler /package/Shaders/Water.hlsl:266 Sampler s 9 True False False s10 Water <code>SamplerState</code> SSRReflectionSampler /package/Shaders/Water.hlsl:267 Sampler s 10 True False False s11 Lighting <code>SamplerState</code> SampCharacterLightProjNoiseSampler /package/Shaders/Lighting.hlsl:479 Sampler s 11 True False False s11 Water <code>SamplerState</code> RawSSRReflectionSampler /package/Shaders/Water.hlsl:268 Sampler s 11 True False False s12 Lighting <code>SamplerState</code> SampRimSoftLightWorldMapOverlaySampler /package/Shaders/Lighting.hlsl:480 Sampler s 12 True False False s14 Lighting <code>SamplerState</code> SampShadowMaskSampler /package/Shaders/Lighting.hlsl:495 Sampler s 14 True False False t0 Dynamic Cubemaps <code>TextureCube&lt;float4&gt;</code> EnvCaptureTexture /features/Dynamic Cubemaps/Shaders/DynamicCubemaps/InferCubemapCS.hlsl:1 SRV t 0 True False False t0 Dynamic Cubemaps <code>TextureCube</code> inputTexture /features/Dynamic Cubemaps/Shaders/DynamicCubemaps/SpecularIrradianceCS.hlsl:19 SRV t 0 True False False t0 Dynamic Cubemaps <code>Texture2D&lt;float&gt;</code> DepthTexture /features/Dynamic Cubemaps/Shaders/DynamicCubemaps/UpdateCubemapCS.hlsl:7 SRV t 0 True False False t0 Grass Lighting <code>Texture2D&lt;float4&gt;</code> TexBaseSampler /features/Grass Lighting/Shaders/RunGrass.hlsl:225 SRV t 0 True False False t0 Light Limit Fix <code>StructuredBuffer&lt;ClusterAABB&gt;</code> clusters /features/Light Limit Fix/Shaders/LightLimitFix/ClusterCullingCS.hlsl:11 SRV t 0 True False False t0 Screen-Space Shadows <code>Texture2D&lt;unorm half&gt;</code> DepthTexture /features/Screen-Space Shadows/Shaders/ScreenSpaceShadows/RaymarchCS.hlsl:6 SRV t 0 True False False t0 Skylighting <code>Texture2D&lt;unorm float&gt;</code> DepthTexture /features/Skylighting/Shaders/Skylighting/SkylightingCS.hlsl:6 SRV t 0 True False False t0 Subsurface Scattering <code>Texture2D&lt;float4&gt;</code> ColorTexture /features/Subsurface Scattering/Shaders/SubsurfaceScattering/SeparableSSSCS.hlsl:3 SRV t 0 True False False t0 AmbientCompositeCS <code>Texture2D&lt;unorm half3&gt;</code> AlbedoTexture /package/Shaders/AmbientCompositeCS.hlsl:6 SRV t 0 True False False t0 BloodSplatter <code>Texture2D&lt;float4&gt;</code> TexBloodColor /package/Shaders/BloodSplatter.hlsl:58 SRV t 0 True False False t0 DeferredCompositeCS <code>Texture2D&lt;half3&gt;</code> SpecularTexture /package/Shaders/DeferredCompositeCS.hlsl:8 SRV t 0 True False False t0 DistantTree <code>Texture2D&lt;float4&gt;</code> TexDiffuse /package/Shaders/DistantTree.hlsl:120 SRV t 0 True False False t0 Effect <code>Texture2D&lt;float4&gt;</code> TexBaseSampler /package/Shaders/Effect.hlsl:412 SRV t 0 True False False t0 Lighting <code>Texture2D&lt;float4&gt;</code> TexColorSampler /package/Shaders/Lighting.hlsl:514 SRV t 0 True False False t0 Particle <code>Texture2D&lt;float4&gt;</code> TexSourceTexture /package/Shaders/Particle.hlsl:196 SRV t 0 True False False t0 RunGrass <code>Texture2D&lt;float4&gt;</code> TexBaseSampler /package/Shaders/RunGrass.hlsl:164 SRV t 0 True False False t0 Sky <code>Texture2D&lt;float4&gt;</code> TexBaseSampler /package/Shaders/Sky.hlsl:136 SRV t 0 True False False t0 Utility <code>Texture2D&lt;float4&gt;</code> TexBaseSampler /package/Shaders/Utility.hlsl:298 SRV t 0 True False False t0 ComputeNASData <code>Texture2D&lt;float3&gt;</code> InputTexture /package/Shaders/VariableRateShading/ComputeNASData.hlsl:3 SRV t 0 True False False t0 ComputeShadingRate <code>Texture2D&lt;float4&gt;</code> nasDataSurface /package/Shaders/VariableRateShading/ComputeShadingRate.hlsl:2 SRV t 0 True False False t0 Water <code>Texture2D&lt;float4&gt;</code> ReflectionTex /package/Shaders/Water.hlsl:270 SRV t 0 True False False t1 Dynamic Cubemaps <code>TextureCube&lt;float4&gt;</code> ReflectionsTexture /features/Dynamic Cubemaps/Shaders/DynamicCubemaps/InferCubemapCS.hlsl:2 SRV t 1 True False False t1 Dynamic Cubemaps <code>Texture2D&lt;float4&gt;</code> ColorTexture /features/Dynamic Cubemaps/Shaders/DynamicCubemaps/UpdateCubemapCS.hlsl:8 SRV t 1 True False False t1 Grass Lighting <code>Texture2D&lt;float4&gt;</code> TexShadowMaskSampler /features/Grass Lighting/Shaders/RunGrass.hlsl:226 SRV t 1 True False False t1 Light Limit Fix <code>StructuredBuffer&lt;StructuredLight&gt;</code> lights /features/Light Limit Fix/Shaders/LightLimitFix/ClusterCullingCS.hlsl:12 SRV t 1 True False False t1 Skylighting <code>Texture2DArray&lt;unorm float&gt;</code> TexShadowMapSampler /features/Skylighting/Shaders/Skylighting/SkylightingCS.hlsl:29 SRV t 1 True False False t1 Subsurface Scattering <code>Texture2D&lt;float4&gt;</code> DepthTexture /features/Subsurface Scattering/Shaders/SubsurfaceScattering/SeparableSSSCS.hlsl:4 SRV t 1 True False False t1 AmbientCompositeCS <code>Texture2D&lt;unorm half3&gt;</code> NormalRoughnessTexture /package/Shaders/AmbientCompositeCS.hlsl:7 SRV t 1 True False False t1 BloodSplatter <code>Texture2D&lt;float4&gt;</code> TexBloodAlpha /package/Shaders/BloodSplatter.hlsl:59 SRV t 1 True False False t1 DeferredCompositeCS <code>Texture2D&lt;unorm half3&gt;</code> AlbedoTexture /package/Shaders/DeferredCompositeCS.hlsl:9 SRV t 1 True False False t1 Effect <code>Texture2D&lt;float4&gt;</code> TexNormalSampler /package/Shaders/Effect.hlsl:413 SRV t 1 True False False t1 Lighting <code>Texture2D&lt;float4&gt;</code> TexNormalSampler /package/Shaders/Lighting.hlsl:515 SRV t 1 True False False t1 RunGrass <code>Texture2D&lt;float4&gt;</code> TexShadowMaskSampler /package/Shaders/RunGrass.hlsl:165 SRV t 1 True False False t1 Sky <code>Texture2D&lt;float4&gt;</code> TexBlendSampler /package/Shaders/Sky.hlsl:137 SRV t 1 True False False t1 Utility <code>Texture2D&lt;float4&gt;</code> TexNormalSampler /package/Shaders/Utility.hlsl:299 SRV t 1 True False False t1 ComputeNASData <code>Texture2D&lt;float2&gt;</code> InputTextureMotionVectors /package/Shaders/VariableRateShading/ComputeNASData.hlsl:4 SRV t 1 True False False t1 Water <code>Texture2D&lt;float4&gt;</code> RefractionTex /package/Shaders/Water.hlsl:271 SRV t 1 True False False t2 Dynamic Cubemaps <code>TextureCube&lt;float4&gt;</code> DefaultCubemap /features/Dynamic Cubemaps/Shaders/DynamicCubemaps/InferCubemapCS.hlsl:3 SRV t 2 True False False t2 Skylighting <code>StructuredBuffer&lt;PerGeometry&gt;</code> perShadow /features/Skylighting/Shaders/Skylighting/SkylightingCS.hlsl:30 SRV t 2 True False False t2 Subsurface Scattering <code>Texture2D&lt;float4&gt;</code> MaskTexture /features/Subsurface Scattering/Shaders/SubsurfaceScattering/SeparableSSSCS.hlsl:5 SRV t 2 True False False t2 BloodSplatter <code>Texture2D&lt;float4&gt;</code> TexFlareColor /package/Shaders/BloodSplatter.hlsl:60 SRV t 2 True False False t2 DeferredCompositeCS <code>Texture2D&lt;unorm half3&gt;</code> NormalRoughnessTexture /package/Shaders/DeferredCompositeCS.hlsl:10 SRV t 2 True False False t2 Effect <code>Texture2D&lt;float4&gt;</code> TexNoiseSampler /package/Shaders/Effect.hlsl:414 SRV t 2 True False False t2 Sky <code>Texture2D&lt;float4&gt;</code> TexNoiseGradSampler /package/Shaders/Sky.hlsl:138 SRV t 2 True False False t2 Utility <code>Texture2D&lt;float4&gt;</code> TexDepthSampler /package/Shaders/Utility.hlsl:300 SRV t 2 True False False t2 Water <code>Texture2D&lt;float4&gt;</code> DisplacementTex /package/Shaders/Water.hlsl:272 SRV t 2 True False False t3 Skylighting <code>Texture2DArray&lt;float4&gt;</code> BlueNoise /features/Skylighting/Shaders/Skylighting/SkylightingCS.hlsl:31 SRV t 3 True False False t3 BloodSplatter <code>Texture2D&lt;float4&gt;</code> TexFlareHDR /package/Shaders/BloodSplatter.hlsl:61 SRV t 3 True False False t3 DeferredCompositeCS <code>Texture2D&lt;unorm half3&gt;</code> MasksTexture /package/Shaders/DeferredCompositeCS.hlsl:11 SRV t 3 True False False t3 Effect <code>Texture2D&lt;float4&gt;</code> TexDepthSamplerEffect /package/Shaders/Effect.hlsl:415 SRV t 3 True False False t3 Utility <code>Texture2DArray&lt;float4&gt;</code> TexShadowMapSampler /package/Shaders/Utility.hlsl:301 SRV t 3 True False False t3 Water <code>TextureCube&lt;float4&gt;</code> CubeMapTex /package/Shaders/Water.hlsl:273 SRV t 3 True False False t4 Skylighting <code>Texture2D&lt;unorm float&gt;</code> OcclusionMapSampler /features/Skylighting/Shaders/Skylighting/SkylightingCS.hlsl:32 SRV t 4 True False False t4 DeferredCompositeCS <code>Texture2D&lt;unorm half3&gt;</code> Masks2Texture /package/Shaders/DeferredCompositeCS.hlsl:12 SRV t 4 True False False t4 Effect <code>Texture2D&lt;float4&gt;</code> TexGrayscaleSampler /package/Shaders/Effect.hlsl:416 SRV t 4 True False False t4 Utility <code>Texture2DArray&lt;float4&gt;</code> TexShadowMapSamplerComp /package/Shaders/Utility.hlsl:302 SRV t 4 True False False t4 Water <code>Texture2D&lt;float4&gt;</code> Normals01Tex /package/Shaders/Water.hlsl:274 SRV t 4 True False False t5 Skylighting <code>Texture2D&lt;unorm half3&gt;</code> NormalRoughnessTexture /features/Skylighting/Shaders/Skylighting/SkylightingCS.hlsl:33 SRV t 5 True False False t5 Utility <code>Texture2D&lt;uint4&gt;</code> TexStencilSampler /package/Shaders/Utility.hlsl:303 SRV t 5 True False False t5 Water <code>Texture2D&lt;float4&gt;</code> Normals02Tex /package/Shaders/Water.hlsl:275 SRV t 5 True False False t6 Lighting <code>Texture2D&lt;float4&gt;</code> TexGlowSampler /package/Shaders/Lighting.hlsl:534 SRV t 6 True False False t6 Utility <code>Texture2DArray&lt;float4&gt;</code> TexFocusShadowMapSamplerComp /package/Shaders/Utility.hlsl:304 SRV t 6 True False False t6 Water <code>Texture2D&lt;float4&gt;</code> Normals03Tex /package/Shaders/Water.hlsl:276 SRV t 6 True False False t7 Utility <code>Texture2D&lt;float4&gt;</code> TexGrayscaleSampler /package/Shaders/Utility.hlsl:305 SRV t 7 True False False t7 Water <code>Texture2D&lt;float4&gt;</code> DepthTex /package/Shaders/Water.hlsl:277 SRV t 7 True False False t8 Water <code>Texture2D&lt;float4&gt;</code> FlowMapTex /package/Shaders/Water.hlsl:278 SRV t 8 True False False t9 Lighting <code>Texture2D&lt;float4&gt;</code> TexBackLightSampler /package/Shaders/Lighting.hlsl:542 SRV t 9 True False False t9 Water <code>Texture2D&lt;float4&gt;</code> FlowMapNormalsTex /package/Shaders/Water.hlsl:279 SRV t 9 True False False t10 Water <code>Texture2D&lt;float4&gt;</code> SSRReflectionTex /package/Shaders/Water.hlsl:280 SRV t 10 True False False t11 Lighting <code>Texture2D&lt;float4&gt;</code> TexCharacterLightProjNoiseSampler /package/Shaders/Lighting.hlsl:548 SRV t 11 True False False t11 Water <code>Texture2D&lt;float4&gt;</code> RawSSRReflectionTex /package/Shaders/Water.hlsl:281 SRV t 11 True False False t12 Lighting <code>Texture2D&lt;float4&gt;</code> TexRimSoftLightWorldMapOverlaySampler /package/Shaders/Lighting.hlsl:549 SRV t 12 True False False t14 Lighting <code>Texture2D&lt;float4&gt;</code> TexShadowMaskSampler /package/Shaders/Lighting.hlsl:564 SRV t 14 True False False t17 Screen-Space Shadows <code>Texture2D&lt;unorm half&gt;</code> ScreenSpaceShadowsTexture /features/Screen-Space Shadows/Shaders/ScreenSpaceShadows/ScreenSpaceShadows.hlsli:1 SRV t 17 True False False t20 SharedData <code>Texture2D&lt;float4&gt;</code> TexDepthSampler /package/Shaders/Common/SharedData.hlsli:131 SRV t 20 True False False t20 DistantTree <code>Texture2D&lt;float4&gt;</code> TexDepthSampler /package/Shaders/DistantTree.hlsl:131 SRV t 20 True False False t20 Effect <code>Texture2D&lt;float4&gt;</code> TexDepthSampler /package/Shaders/Effect.hlsl:131 SRV t 20 True False False t20 Lighting <code>Texture2D&lt;float4&gt;</code> TexDepthSampler /package/Shaders/Lighting.hlsl:131 SRV t 20 True False False t20 RunGrass <code>Texture2D&lt;float4&gt;</code> TexDepthSampler /package/Shaders/RunGrass.hlsl:131 SRV t 20 True False False t20 Sky <code>Texture2D&lt;float4&gt;</code> TexDepthSampler /package/Shaders/Sky.hlsl:131 SRV t 20 True False False t20 Water <code>Texture2D&lt;float4&gt;</code> TexDepthSampler /package/Shaders/Water.hlsl:131 SRV t 20 True False False t25 ShadowSampling <code>Texture2DArray&lt;float4&gt;</code> TexShadowMapSampler /package/Shaders/Common/ShadowSampling.hlsli:21 SRV t 25 True False False t25 Water <code>Texture2DArray&lt;float4&gt;</code> TexShadowMapSampler /package/Shaders/Water.hlsl:21 SRV t 25 True False False t26 ShadowSampling <code>StructuredBuffer&lt;PerGeometry&gt;</code> perShadow /package/Shaders/Common/ShadowSampling.hlsli:22 SRV t 26 True False False t26 Water <code>StructuredBuffer&lt;PerGeometry&gt;</code> perShadow /package/Shaders/Water.hlsl:22 SRV t 26 True False False t27 Cloud Shadows <code>TextureCube&lt;float4&gt;</code> cloudShadowsTexture /features/Cloud Shadows/Shaders/CloudShadows/CloudShadows.hlsli:2 SRV t 27 True False False t29 Skylighting <code>Texture2D&lt;unorm float&gt;</code> OcclusionMapSampler /features/Skylighting/Shaders/Skylighting/Skylighting.hlsli:2 SRV t 29 True False False t36 Subsurface Scattering <code>StructuredBuffer&lt;PerPassSSS&gt;</code> perPassSSS /features/Subsurface Scattering/Shaders/SubsurfaceScattering/SubsurfaceScattering.hlsli:8 SRV t 36 True False False t40 Terrain Occlusion <code>Texture2D&lt;float&gt;</code> TexTerraOcc /features/Terrain Occlusion/Shaders/TerrainOcclusion/TerrainOcclusion.hlsli:1 SRV t 40 True False False t41 Terrain Occlusion <code>Texture2D&lt;float&gt;</code> TexNormalisedHeight /features/Terrain Occlusion/Shaders/TerrainOcclusion/TerrainOcclusion.hlsli:2 SRV t 41 True False False t42 Terrain Occlusion <code>Texture2D&lt;float2&gt;</code> TexShadowHeight /features/Terrain Occlusion/Shaders/TerrainOcclusion/TerrainOcclusion.hlsli:3 SRV t 42 True False False t50 Light Limit Fix <code>StructuredBuffer&lt;StructuredLight&gt;</code> lights /features/Light Limit Fix/Shaders/LightLimitFix/LightLimitFix.hlsli:27 SRV t 50 True False False t51 Light Limit Fix <code>StructuredBuffer&lt;uint&gt;</code> lightList /features/Light Limit Fix/Shaders/LightLimitFix/LightLimitFix.hlsli:28 SRV t 51 True False False t52 Light Limit Fix <code>StructuredBuffer&lt;LightGrid&gt;</code> lightGrid /features/Light Limit Fix/Shaders/LightLimitFix/LightLimitFix.hlsli:29 SRV t 52 True False False t53 Light Limit Fix <code>StructuredBuffer&lt;StrictLightData&gt;</code> strictLights /features/Light Limit Fix/Shaders/LightLimitFix/LightLimitFix.hlsli:30 SRV t 53 True False False t64 Dynamic Cubemaps <code>TextureCube&lt;float4&gt;</code> specularTexture /features/Dynamic Cubemaps/Shaders/DynamicCubemaps/DynamicCubemaps.hlsli:1 SRV t 64 True False False t70 Water Caustics <code>Texture2D&lt;float4&gt;</code> WaterCaustics /features/Water Caustics/Shaders/WaterCaustics/WaterCaustics.hlsli:7 SRV t 70 True False False t71 Water Caustics <code>StructuredBuffer&lt;PerPassWaterCaustics&gt;</code> perPassWaterCaustics /features/Water Caustics/Shaders/WaterCaustics/WaterCaustics.hlsli:8 SRV t 71 True False False t72 Water Parallax <code>StructuredBuffer&lt;PerPassWaterParallax&gt;</code> perPassWaterParallax /features/Water Parallax/Shaders/WaterParallax/WaterParallax.hlsli:14 SRV t 72 True False False u0 Dynamic Cubemaps <code>RWTexture2DArray&lt;float4&gt;</code> EnvInferredTexture /features/Dynamic Cubemaps/Shaders/DynamicCubemaps/InferCubemapCS.hlsl:5 UAV u 0 True False False u0 Dynamic Cubemaps <code>RWTexture2DArray&lt;float4&gt;</code> outputTexture /features/Dynamic Cubemaps/Shaders/DynamicCubemaps/SpecularIrradianceCS.hlsl:20 UAV u 0 True False False u0 Dynamic Cubemaps <code>RWTexture2DArray&lt;float4&gt;</code> DynamicCubemap /features/Dynamic Cubemaps/Shaders/DynamicCubemaps/UpdateCubemapCS.hlsl:3 UAV u 0 True False False u0 Light Limit Fix <code>RWStructuredBuffer&lt;ClusterAABB&gt;</code> clusters /features/Light Limit Fix/Shaders/LightLimitFix/ClusterBuildingCS.hlsl:24 UAV u 0 True False False u0 Light Limit Fix <code>RWStructuredBuffer&lt;uint&gt;</code> lightIndexCounter /features/Light Limit Fix/Shaders/LightLimitFix/ClusterCullingCS.hlsl:14 UAV u 0 True False False u0 Screen-Space Shadows <code>RWTexture2D&lt;unorm half&gt;</code> OutputTexture /features/Screen-Space Shadows/Shaders/ScreenSpaceShadows/RaymarchCS.hlsl:7 UAV u 0 True False False u0 Skylighting <code>RWTexture2D&lt;half2&gt;</code> SkylightingTextureRW /features/Skylighting/Shaders/Skylighting/SkylightingCS.hlsl:35 UAV u 0 True False False u0 Subsurface Scattering <code>RWTexture2D&lt;float4&gt;</code> SSSRW /features/Subsurface Scattering/Shaders/SubsurfaceScattering/SeparableSSSCS.hlsl:1 UAV u 0 True False False u0 AmbientCompositeCS <code>RWTexture2D&lt;half3&gt;</code> MainRW /package/Shaders/AmbientCompositeCS.hlsl:13 UAV u 0 True False False u0 DeferredCompositeCS <code>RWTexture2D&lt;half3&gt;</code> MainRW /package/Shaders/DeferredCompositeCS.hlsl:14 UAV u 0 True False False u0 CopyShadowData <code>RWStructuredBuffer&lt;PerGeometry&gt;</code> copiedData /package/Shaders/ShadowTest/CopyShadowData.hlsl:95 UAV u 0 True False False u0 ComputeNASData <code>RWTexture2D&lt;float4&gt;</code> OutputTexture /package/Shaders/VariableRateShading/ComputeNASData.hlsl:5 UAV u 0 True False False u0 ComputeShadingRate <code>RWTexture2D&lt;uint&gt;</code> vrsSurface /package/Shaders/VariableRateShading/ComputeShadingRate.hlsl:1 UAV u 0 True False False u1 Dynamic Cubemaps <code>RWTexture2DArray&lt;float4&gt;</code> DynamicCubemapRaw /features/Dynamic Cubemaps/Shaders/DynamicCubemaps/UpdateCubemapCS.hlsl:4 UAV u 1 True False False u1 Light Limit Fix <code>RWStructuredBuffer&lt;uint&gt;</code> lightIndexList /features/Light Limit Fix/Shaders/LightLimitFix/ClusterCullingCS.hlsl:15 UAV u 1 True False False u1 DeferredCompositeCS <code>RWTexture2D&lt;half4&gt;</code> NormalTAAMaskSpecularMaskRW /package/Shaders/DeferredCompositeCS.hlsl:15 UAV u 1 True False False u2 Dynamic Cubemaps <code>RWTexture2DArray&lt;float4&gt;</code> DynamicCubemapPosition /features/Dynamic Cubemaps/Shaders/DynamicCubemaps/UpdateCubemapCS.hlsl:5 UAV u 2 True False False u2 Light Limit Fix <code>RWStructuredBuffer&lt;LightGrid&gt;</code> lightGrid /features/Light Limit Fix/Shaders/LightLimitFix/ClusterCullingCS.hlsl:16 UAV u 2 True False False u2 DeferredCompositeCS <code>RWTexture2D&lt;half2&gt;</code> SnowParametersRW /package/Shaders/DeferredCompositeCS.hlsl:16 UAV u 2 True False False"},{"location":"Developers/","title":"Developers","text":""},{"location":"Developers/#community-shaders-base-package","title":"Community Shaders Base Package","text":"<p>This is the base package that loads all the custom shaders.</p>"},{"location":"Developers/#dll","title":"DLL","text":"<p>This is the main dll in the repo that enables the replacement of vanilla shaders with new shaders. </p> <p>Can be found primarily in /main/src</p>"},{"location":"Developers/#shaders","title":"Shaders","text":"<p>The default shaders will be found in /main/package/Shaders.</p> <p>These default shaders should be overwritten by feature specific shaders.</p>"},{"location":"Developers/#features","title":"Features","text":"<p>These are custom features that are loaded after the default CS install.</p>"},{"location":"Developers/#dll_1","title":"DLL","text":"<p>To add a new feature, the DLL needs to be modified. See prior examples of adding new features for the full list. feat: add Rain wetness effects</p> <ul> <li>Feature.cpp</li> </ul> <p>The main features should live here: /dev/src/Features</p>"},{"location":"Developers/#virtual-functions","title":"Virtual functions","text":""},{"location":"Developers/#required-functions","title":"Required functions:","text":"<ul> <li>GetName</li> <li>Used in ImGui feature list and json entry per feature</li> <li>GetShortName</li> <li>Used for ini loading (No spaces usually)</li> <li>SetupResources</li> <li>Called once in startup</li> <li>Reset</li> <li>Called once per frame</li> <li>DrawSettings</li> <li>Used for rendering ImGui</li> <li>Draw</li> <li>Normal rendering code here</li> <li>Save</li> <li>Serialize settings to json</li> <li>RestoreDefaultSettings</li> <li>Reset feature settings to default value</li> </ul>"},{"location":"Developers/#functions-that-should-be-defined","title":"Functions that should be defined","text":"<ul> <li>Load</li> <li>Deserialize settings from json, also need to call <code>Feature::Load</code> after loading</li> </ul>"},{"location":"Developers/#functions-that-can-be-overridden","title":"Functions that can be overridden","text":"<p>These are already default defined in Feature.h but can be overriden if you need to do something extra like defined below</p> <ul> <li>GetShaderDefineName</li> <li>used as an additional macro added when compiling shaders specified by HasShaderDefine, if the feature is loaded</li> <li>HasShaderDefine</li> <li>if a shader type returns true, then GetShaderDefineName macro is added to its compilation, if the feature is loaded</li> <li>DrawDeferred</li> <li>This one is not called yet, that is in the subsurface-scattering branch</li> <li>DataLoaded</li> <li>Called by SKSE <code>kDataLoaded</code> event</li> <li>PostPostLoad</li> <li>Called by SKSE <code>kPostPostLoad</code> event</li> <li>ClearShaderCache</li> <li>Called by imgui clear shader cache button</li> </ul>"},{"location":"Developers/#shaders_1","title":"Shaders","text":"<p>Shaders are stored in /dev/features</p>"},{"location":"Developers/#register-usage","title":"Register Usage","text":"<p>(<code>dev</code> branch, 13th Apr, 2024)</p>"},{"location":"Developers/#debugging","title":"Debugging","text":"<p>To debug CS you will need to be able to debug both the cpp dll and the hlsl shader files.</p>"},{"location":"Developers/#remove-drm","title":"Remove DRM","text":"<ol> <li>Save a copy of the original exe so you can replace it. </li> <li>Use Steamless to strip the SteamDRM from the Skyrim.exe. This is required for a debugger to attach. <p>Make sure to check <code>Keep Bind Section</code> in Steamless, game will not boot without it.</p> </li> </ol>"},{"location":"Developers/#disable-aslr","title":"Disable ASLR","text":"<p>To ensure addresses don't move, disable ASLR. This can be done with CFF Explorer. <code>Optional Header</code> -&gt; <code>DLL Characteristics</code> -&gt; <code>DLL can move</code>. Disable this.</p> <p></p>"},{"location":"Developers/#attach","title":"Attach","text":""},{"location":"Developers/#renderdoc","title":"RenderDoc","text":"<p>RenderDoc can be used to debug shaders. </p> <ol> <li>Disable incompatible features: </li> <li>Skyrim Upscaler</li> <li>ReShade</li> <li>Frame Generation - Advanced -&gt; Disable At Boot</li> <li>Optional Enable Global Hooking. Make sure to <code>Enable Global Hook</code> which will grey out all settings. This also will prevent closing renderdoc until you disable the setting.</li> <li>Set up <code>Launch Application</code> so it will find the skse.exe (or Skyrim.exe if global hooking) when it launches. </li> </ol> <p></p> <ol> <li>Launch Skyrim. You will know RenderDoc has connected because of the message in the top left of Skyrim <code>Capturing D3D11</code>. If it doesn't show, try toggling the global hook and launching again.</li> </ol> <p></p> <ol> <li>Enable Developer Mode. Developer Mode can be enabled by setting the <code>Advanced Settings</code> -&gt; <code>Log Level</code> to <code>TRACE</code> or <code>DEBUG</code>.</li> </ol> <p></p> <ol> <li>Enable <code>Advanced</code> -&gt; <code>Extended Frame Annotations</code> to help populate info in the rendering process.</li> </ol> <p></p> <ol> <li> <p>Clear Shader Cache and Disk Cache. This is necessary to save debug information in the shaders to access named buffers/hlsl in renderdoc.</p> </li> <li> <p>In game, press <code>F12</code> to capture the scene.</p> </li> <li>In Renderdoc, <code>File</code> -&gt; <code>Attach to Running Instance</code>. Select Skyrim and <code>Connect to App</code>.</li> </ol> <p></p> <ol> <li>Once attached, a new tab will appear. Double click any captures to load. </li> </ol> <p></p> <ol> <li>You can verify you are seeing debug information by opening up the Pipeline tab and checking the Vertex or Pixel shaders. The resources should be named. In this case, we're getting <code>water.hlsl</code> data.</li> </ol> <p></p>"},{"location":"Developers/#debugging-individual-shaders","title":"Debugging Individual Shaders","text":"<p>It is possible to block individual shaders in game to find a faulty shader.</p> <ol> <li>Find the faulty mesh in game. Confirm the mesh is caused by CS by toggling CS using the <code>Toggle Effects Key</code> (default <code>Numpad *</code>). The faulty mesh should disappear. If it doesn't, it's a Vanilla bug. This is an example with CS disabled:</li> </ol> <p></p> <p>CS Enabled showing faulty mesh (note texture is missing in red circle):</p> <p></p> <ol> <li>Enable Developer Mode. Developer Mode can be enabled by setting the <code>Advanced Settings</code> -&gt; <code>Log Level</code> to <code>TRACE</code> or <code>DEBUG</code>.</li> </ol> <p></p> <ol> <li>Hit the <code>PageUp</code> or <code>PageDown</code> to cycle all active shaders until the faulty mesh disappears. This should match the vanilla shader.</li> </ol> <p></p> <ol> <li>[Optional] Stop blocking shaders by clicking on the <code>Advanced Settings</code> -&gt; <code>Stop Blocking Shaders</code> button. This should also flush the log and also provide a noticeable log entry to identify the last shader blocked. This button only appears when shaders are being blocked.</li> </ol> <p></p> <ol> <li>Review the CommunityShaders.log file. The blocked shader should be the last entry before <code>Stopped blocking shaders</code> (from step 4). In the example below, the ID/descriptor is <code>12000004</code> and it is a Lighting/Vertex shader, with the compile options of <code>WETNESS_EFFECTS LIGHT_LIMIT_FIX COMPLEX_PARALLAX_MATERIALS DYNAMIC_CUBEMAPS LODLANDNOISE LODLANDSCAPE MODELSPACENORMALS SHADOWSPLITCOUNT=3</code>. With this information, we can look at <code>lighting.hlsl</code> to figure out what hlsl is active.</li> </ol> <pre><code>[2023-11-20 19:09:59.451] [debug] [33112] [ShaderCache.cpp:1557] Blocking shader (6/93) Lighting:Vertex:WETNESS_EFFECTS LIGHT_LIMIT_FIX COMPLEX_PARALLAX_MATERIALS DYNAMIC_CUBEMAPS LODLANDNOISE LODLANDSCAPE MODELSPACENORMALS SHADOWSPLITCOUNT=3 \n[2023-11-20 19:09:59.451] [debug] [33112] [ShaderCache.cpp:1209] Skipping blocked shader 12000004:Lighting:Vertex:WETNESS_EFFECTS LIGHT_LIMIT_FIX COMPLEX_PARALLAX_MATERIALS DYNAMIC_CUBEMAPS LODLANDNOISE LODLANDSCAPE MODELSPACENORMALS SHADOWSPLITCOUNT=3  total: 1\n[2023-11-20 19:10:10.734] [debug] [33112] [ShaderCache.cpp:1568] Stopped blocking shaders\n</code></pre> <p>For comparison, if we block the corresponding Pixel shader, the coloring will be distorted instead which is revealed to be ID/descriptor <code>12000005</code> which is the Lighting:Pixel shader.</p> <p> <pre><code>[2023-11-20 23:07:17.546] [debug] [70860] [ShaderCache.cpp:1537] Blocking shader (24/97) Lighting:Pixel:WETNESS_EFFECTS LIGHT_LIMIT_FIX COMPLEX_PARALLAX_MATERIALS DYNAMIC_CUBEMAPS LODLANDNOISE LODLANDSCAPE MODELSPACENORMALS SHADOWSPLITCOUNT=3 VC \n[2023-11-20 23:07:17.564] [debug] [74308] [ShaderCache.cpp:1243] Skipping blocked shader 12000005:Lighting:Pixel:WETNESS_EFFECTS LIGHT_LIMIT_FIX COMPLEX_PARALLAX_MATERIALS DYNAMIC_CUBEMAPS LODLANDNOISE LODLANDSCAPE MODELSPACENORMALS SHADOWSPLITCOUNT=3 VC  total: 1\n</code></pre></p>"},{"location":"Developers/#resources","title":"Resources","text":"<ul> <li>HLSL Tutorial</li> <li>HLSL Development Cookbook</li> <li>HLSL Coordinates- World/View/Projection</li> </ul>"},{"location":"Dynamic-Cubemap-Creator/","title":"Dynamic Cubemap Creator","text":"<p>Dynamic Cubemap Creator is a small tool in CS that allows you to create cubemap textures. Unlike ENB dynamic cubemaps, the ones in CS do not need to be black - they can contain information about tint and roughness of the material. For example for golden jewelry you would want a yellow tint and low roughness, which would give you clear yellow reflections. </p> <p>You can find the cubemap creator inside the Dynamic Cubemaps tab in CS menu. To enable the creator, you need to set the CREATOR keyword as a shader define and recompile your shaders (highlighted in the image below). Then you can set the tint and roughness however you want, and after hitting Export, the cubemap texture will appear in your MO2 overwrite folder.</p> <p></p>"},{"location":"FAQ/","title":"FAQ","text":""},{"location":"FAQ/#installation-compatibility","title":"Installation &amp; compatibility","text":""},{"location":"FAQ/#where-can-i-find-the-latest-cs-version","title":"Where can I find the latest CS version?","text":"<p>The latest stable version is always on Nexus. If you want to play stable, use this. If you are interested to try out the latest development versions, those are usually pinned in one of the channels on the CS Discord. The different channels reflect different development branches. Some are more experimental, some already further down the development road. Do some reading to find out which one is the one you would like to try.</p>"},{"location":"FAQ/#how-to-install-community-shaders","title":"How to install Community Shaders?","text":"<ol> <li>Uninstall alternative shaders mods, e.g. remove enbseries folder and .ini files</li> <li>Read the instructions on the mod page</li> <li>Install all necessary Requirements mentioned on the mod page</li> <li>Install Community Shaders as any other mod</li> <li>Check Features section on the mod page and install all those you would like to use (generally all). Yes, this is quite a number.</li> <li>Check the Compatibility section on the mod page. Disable the mods that are not compatible in case you use them.</li> </ol>"},{"location":"FAQ/#in-which-order-do-i-have-to-place-cs-mods","title":"In which order do I have to place CS mods?","text":"<p>It does not matter for most part. Only 'Community Shaders' should be first of the pack so that 'Grass Lighting' and 'Tree LOD Lighting' overwrite it.</p>"},{"location":"FAQ/#is-enb-light-cubemap-reflections-or-capture-warmer-needed-with-cs","title":"Is ENB Light, Cubemap Reflections or Capture Warmer needed with CS?","text":"<p>As of CS 0.7.5 beta, ENB Light is not needed anymore as LLF covers lights for those meshes. Also Cubemap Reflections and Capture Warmer are not required anymore.</p>"},{"location":"FAQ/#do-i-still-need-lux-split-meshes-can-i-optimise-draw-calls-here","title":"Do I still need Lux split meshes / can I optimise draw calls here?","text":"<p>Lux splits bigger meshes into smaller pieces to workaround the limit of allowing only 4 light sources per mesh/object. With smaller objects, chances are better that not too many light sources shed light on an object. However this  increases draw calls, because much more objects must be rendered. CS does not have this limit so it is better to install Lux without the mesh options in fomod.</p> <p>Answer from author of Lux (03/11/2024): These meshes main purpose is to help with engine limitations indeed so using CS light limit fix makes them optional. I'm fixing a lot of vanilla meshes when optimizing them though so you won't have these fixes anymore if you're not installing them. I'm also reworking most mods texture sets because the new meshes have different trishape structures, thus keep in mind that you'll need to delete my own texture set edits on vanilla meshes or they'll be all over the place if not using my meshes. Split meshes increase drawcalls so it's up to you. I mean if you can survive that you can just keep them. If the performance issue is a priority then you should remove them.</p> <p>Be careful with injected meshes though, I'm replacing models here and there, so any mesh with non vanilla name should be kept unless you fix that directly in the patch plugin. They're often named Lux_xxx so they can't be missed. If I remember well I'm using these meshes in Blackreach (mountain stuff) and some floor I needed to replace in a player house (Skyfall Estate).</p>"},{"location":"FAQ/#does-cs-work-with-the-skyrim-upscaler-and-reshade","title":"Does CS work with the Skyrim Upscaler and Reshade?","text":"<p>Yes, but only the Nexus version of the Upscaler is supported. Other versions may or may not work. </p>"},{"location":"FAQ/#configuration","title":"Configuration","text":""},{"location":"FAQ/#how-can-i-open-cs-menu-to-changeactivatedeactivate-some-of-the-effects","title":"How can I open CS menu to change/activate/deactivate some of the effects?","text":"<p>Press end key on your keyboard. If playing in VR, virtual keyboard does not work and the menu is not shown in VR mode. Change to desktop mode and press the key on your physical keyboard.</p>"},{"location":"FAQ/#can-i-also-edit-settings-other-than-the-cs-menu","title":"Can I also edit settings other than the CS menu?","text":"<p>Yes, the first time you change any setting CS generates a settings file CommunityShadersUSER.json in your overwrite folder under SKSE\\Plugins. You can edit this file. The default settings are stored in Community Shaders mod under SKSE\\Plugins\\CommunityShaders.json. It is not the suggested way to edit settings there, but technically possible.</p>"},{"location":"FAQ/#do-i-need-to-change-ini-for-pp-as-i-did-for-vanilla-hdr","title":"Do I need to change ini for PP as I did for Vanilla HDR?","text":"<p>No, these are not used anymore. (fLightingOutputColourClampPostSpec, fLightingOutputColourClampPostEnv, fLightingOutputColourClampPostLit)</p>"},{"location":"FAQ/#development-of-new-features","title":"Development of new features","text":""},{"location":"FAQ/#will-new-feature-x-be-supported-on-vr-ae-version","title":"Will new feature X be supported on VR / AE version?","text":"<p>New features are usually explored and fleshed out for one version (mostly 1.5.97) in the initial phase. If the team is happy with it and it can be ported features are often enabled for other versions later. But there are no guarantees/commitments. Be patient and do not try to push.</p>   I have a new idea and would like to have a special effect shader developed! <p>Use this motivation to read up on CS development and start your first steps developing your first shader. Please spend some time reading an experimenting on your on to show your engagement and feel free to join the discord to discuss then. You are also also free to mention your idea within feature-request section on Discord, but please do not engage into discussions with CS developers to analyse for you. They have a big backlog and even more own ideas. Also please do not excert pressure via donations as this is not intended for contract work, but to support overall CS development. </p>"},{"location":"FAQ/#errors","title":"Errors","text":""},{"location":"FAQ/#there-are-strangebroken-effect-with-cs","title":"There are strange/broken effect with CS!","text":"<ol> <li>Check that the version you are using is supported. Test versions generally support 1.5.97, other versions if explicitly stated</li> <li>See here to validate that configuration files are generated correctly</li> <li>Delete Shadercache and disk cache as described here to regenerate</li> <li>Make sure that all parts of Community Shaders are of the same version. Read Community Shaders Nexus page to see which mods are part of Community Shaders. You cannot mix parts of different CS versions</li> <li>Check that the error is really coming from CS. Disable CS and check if the issue is gone.</li> <li>Make sure that the issue is reproducible and note down how it can be reproduced.</li> <li>Check that Shaders are loaded without issues when starting Skyrim. Otherwise, please save the CS log file.</li> <li>If your game crashes, make sure that you use Crash Logger. Do not use Trainwreck. Save your crashlog.  Report the issue including the logs and steps to reproduce via User Help channel on discord</li> </ol>"},{"location":"FAQ/#communityshadersjson-is-created-blank-starting-the-game-results-in-a-freeze","title":"CommunityShaders.json is created blank / starting the game results in a freeze","text":"<ol> <li>Delete CommunityShaders.json and CommunityShadersUser.json. You can ususally find it in your Overwrite folder under SKSE/Plugins. See here how to access your Overwrite folder in MO2. Start the game again and check that CommunityShaders.json is created with some content (not blank / not 0kb size).</li> <li>If this does not help, and you are using PrivateProfileRedirector make sure that it is updated to the latest version. Version 0.5.x or lower is known to cause this issue. Please update to version 0.6.x or higher.</li> </ol>"},{"location":"FAQ/#shaders-compilation-leads-to-ctd","title":"Shaders compilation leads to CTD","text":"<p>Shader compiler comes from Microsoft and cannot be fixed by CS team. There are such cases known on weaker GPU if you max out the GPU during compiling. You can try reducing the shader compiler threads (\"Background Compiler Threads\" &amp; \"Compiler Threads\"). Search for a file 'CommunityShadersUSER.json' and edit those config values. If you have not yet successfully ran CS and do not have an own config file open 'Community Shaders' mod go to SKSE\\Plugins and edit 'CommunityShaders.json'. This is not best practice and you have to change those values again after your next CS update, but it may bring you past the compilation.</p>"},{"location":"FAQ/#shaders-failed-to-compile-red-colored-errors","title":"Shaders failed to compile! Red colored errors!","text":"<p>You most likely combined incompatible versions of CS and its features, or the shader cache did not regenerate after update. Either use the newest Nexus releases or a single test build from Discord, never combine them. Delete CS, its features and shader cache (Overwrite folder in MO2) and install CS again without combining versions. If not fixed, follow the steps in the previous answer. </p>"},{"location":"FAQ/#how-to-fix-if-the-eyes-of-some-npcs-look-strange","title":"How to fix if the eyes of some NPCs look strange?","text":"<p>You have two options to fix this:  - Either hide eyecubemap.dds from 'Dynamic Cubemaps - Metal'- Get a mod like Subtle eye cubmap and overwrite 'Dynamic Cubemaps - Metal'</p>"},{"location":"FAQ/#terrain-does-not-look-parallaxed","title":"Terrain does not look parallaxed!","text":"<ol> <li>Make sure you're using terrain textures with parallax support, like Atlantean Landscapes and Terrain Blending Fix</li> <li>Under the 'Complex Parallax Materials' tab in the CS menu, make sure 'Enable Terrain' is checked.</li> <li>If on Skyrim VR, check if bLandSpecular is set to 1 in the SkyrimVR.ini file.</li> </ol>"},{"location":"FAQ/#parallaxed-textures-keeps-enablingdisabling-causing-flickering","title":"Parallaxed textures keeps enabling/disabling causing flickering!","text":"<p>Make sure you have installed SSE Engine Fixes.</p>"},{"location":"FAQ/#sse-engine-fixes-crashes-the-game","title":"SSE Engine Fixes crashes the game!","text":"<ol> <li>Install (Part 1) SSE Engine Fixes</li> <li>Install (Part 2) Engine Fixes - skse64 Preloader and TBB Lib</li> <li>Navigate to the location where (Part 1) SSE Engine Fixes is located and go in the folder skse/plugins</li> <li>Open the file named \"EngineFixes.toml\" and set the following variables to false: EnableAchievementsWithMods, SaveAddedSoundCategories, SaveScreenshots, save and close the file</li> </ol>"},{"location":"FAQ/#strange-bright-lights-glowing-smoke-using-extra-particle-lights-pack","title":"Strange bright lights / glowing smoke using Extra Particle Lights Pack","text":"<p>Delete smokeparticle01.ini from Extra Particle Lights Pack.</p>"},{"location":"FAQ/#the-shadercache-is-not-being-generated-cs-does-not-come-in-effect","title":"The shadercache is not being generated / CS does not come in effect","text":"<p>For beta versions of CS the version numbering does not change. So CS cannot really see when it needs to update the shadercache. Usually deleting the shadercache is sufficient (step 2), but if you want to be on the safe side, also clean disk cache There are two options to regenerate the shadercache:</p> <ol> <li>To regenerate disk cache you can open the CS in-game menu by pressing the end key and chose 'Clear disk cache'.</li> <li>To regenerate the shadercache open your 'overwrite' folder in MO2 as shown here. There should be a folder Shadercache with many subdirectories and .pso/.vso files in there. To let it regenerate with the next game start, simply delete the complete Shadercache folder.</li> </ol>"},{"location":"FAQ/#wetness-effects-look-broken-have-edgy-areas-and-just-completly-wrong","title":"Wetness effects look broken, have edgy areas and just completly wrong","text":"<p>Make sure that you have disabled Dynamic resolution in your Skyrim.ini [Display] section. It should be bEnableAutoDynamicResolution=0 For nVidia users also make sure that in nVidia control panel the option 'Antialiasing - transparency' is set to off.</p>"},{"location":"FAQ/#tree-lod-looks-is-too-dark-and-looks-strange","title":"Tree LoD looks is too dark and looks strange","text":"<p>Earlier versions of CS had a special feature for tree LoD lighting which used \"complex\" texture with diffuse textures in the upper half and normal map textures in the lower half. Therefore, it was suggested to activate this in Dyndolod. With the unified shader model, this is not required anymore. Hence if you have changed it earlier, make sure that you have set configuration value set like this:  TexGen_SSE.ini:   TreeNormalMaps=0 Dyndolod_SSE.ini: TreeLODComplexAtlas=0</p>"},{"location":"Light-Placer/","title":"Light Placer","text":""},{"location":"Light-Placer/#background","title":"Background","text":"<p>Light Placer is a framework for attaching lights to objects and actors, via configurable .JSON files.</p> <p>Unlike ENB or Community Shader particle lights, Light Placer adds real light bulbs (omni lights, spotlights, and shadow casting lights) with unlimited range and brightness. </p> <p>They can flicker, affect detection, change color based on time of day (external emittance) and so on, just like regular Skyrim light sources.</p> <p>This does mean they are subject to Skyrim's light limit, so Light Limit Fix is a requirement. You can attempt to run this with ENB and lots and lots of split meshes but I would not recommend it.</p>"},{"location":"Light-Placer/#adding-lights","title":"Adding Lights","text":"<p>Check out the Light Placer wiki for documentation and examples.\ufeff</p>"},{"location":"Particle-Lights/","title":"Particle Lights","text":""},{"location":"Particle-Lights/#background","title":"Background","text":"<p>Community Shaders is able to process particle lights that were originally created for ENB. See Guide to adding particle lights.</p>"},{"location":"Particle-Lights/#adding-particle-lights","title":"Adding Particle Lights","text":"<p>While you can still edit meshes, CS actually allows adding particle lights by creating an ini file.</p> <p>Particle lights may be added by creating a .ini file in the <code>\\data\\ParticleLights</code> directory.</p> <p>The name must match the name of the texture. For example, <code>fxglowenb.dds</code> requires <code>fxglowenb.ini</code></p> <p>As long as the file exists, it will be used. The content can have the following values; any missing get a default listed below.. <pre><code>[Light]\nCull = false\nColorMultRed = 1.0\nColorMultGreen = 1.0\nColorMultBlue = 1.0 \nRadiusMult = 1.0\nSaturationMult = 1.0\nFlicker = false\nFlickerSpeed = 1.0\nFlickerIntensity = 0.0\nFlickerMovement = 0.0\n</code></pre></p> <p>More examples:</p> <ul> <li>Light Limit Fix - Candle Glow</li> <li>Light Limit Fix Particle Lights Example</li> <li>LLF Particle Lights instead of Fake Glow</li> </ul>"},{"location":"Shader-Constant-Buffers/","title":"Shader Constant Buffers","text":"<p>This is a temporary scratch pad.</p>"},{"location":"Shader-Constant-Buffers/#image-shaders","title":"Image Shaders","text":""},{"location":"Shader-Constant-Buffers/#ps","title":"PS","text":"<p>Based on reviewing VanillaHDR code <pre><code>#pack(cbuffer)\n\nstruct cb2\n{\n    float scaleBloom; // treat at bool &gt; 0.5 = true\n    float3 Params01_0_yzw;\n    float4 Params01_2;\n    float bloomFactor;\n    float whiteFactor;\n    float filmicFactor; // treat at bool &gt; 0.5 = true\n    float Param01_2_w;\n    float saturation;\n    float Param01_3_y;\n    float contrast;\n    float brightness;\n#ifdef FADE\n    float3 fade;\n    float fadeWeight;\n#endif\n    float3 tintColor;\n    float tintWeight;\n}\n</code></pre> Initial review of VR shows that <code>tintColor</code> and <code>tintWeight</code> appear to be 0.</p>"},{"location":"True-PBR/","title":"True PBR","text":""},{"location":"True-PBR/#true-pbr-for-modders","title":"True PBR for modders","text":"<p>PBR (physically based rendering) approximates how real materials react to light and is used in most modern games. True PBR is a part of Community Shaders that has several benefits:</p> <ul> <li>More realistic lighting than in vanilla and complex material is possible, and more effects such as SSS, glow, or multilayer can be combined.</li> <li>It allows the usage of PBR materials which are widely available online, many for free</li> <li>Those materials can be used easily in standard tools like Blender and exported in a simple way</li> <li>The materials will look the same way in Skyrim as in those tools so it is easy to create consistent visuals. There is no need to experiment and adjust brightness according to Skyrim's very unique levels</li> </ul> <p>To use PBR you will need to obtain Community Shaders which includes the True PBR feature as of version 1.0.0 and True PBR texture packs. Those are available on Nexus. But remember, those texture packs will not work without Community Shaders enabled.</p> <p>Warning</p> <p>If meshes are not provided by the author, then you must run ParallaxGen on your load order to create patched meshes and a plugin to enable PBR shaders on those meshes.</p> <p>If you are not a texture creator you can safely ignore everything else described below.</p>"},{"location":"True-PBR/#true-pbr-for-texture-artists","title":"True PBR for texture artists","text":"<p>All the followings sections are only relevant to you if are creating textures for Skyrim yourself.  To generate a set of True PBR textures you need to do two things:</p> <ol> <li>Update the meshes where those textures are being used to enable PBR for those meshes: True PBR only cares about meshes marked with a specific flag, everything else is rendered as usual. True PBR mods therefore contain meshes marked for PBR and a set of PBR textures. </li> <li>Create True PBR textures: The base textures for True PBR are albedo, normal, roughness, metallic, ambient occlusion and specular. Parallax and emission (if emissive color map is provided) are also supported. Additionally the material can use two-sided foliage or subsurface shading, which require subsurface color map and multilayer Parallax which approximates a semitransparent surface above a hard surface (also following Unreal).</li> </ol>"},{"location":"True-PBR/#mesh-changes-in-nif","title":"Mesh changes (in .nif)","text":""},{"location":"True-PBR/#flags","title":"Flags","text":"<p>The following flags of BSShaderProperty are used to tag a mesh for PBR rendering:</p> <ul> <li>Byte 55 (Unused01 in NifSkope) - enables PBR for this BSGeometry</li> <li>Byte 57 (Soft_Lighting in NifSkope) - enables two-sided foliage shading</li> <li>Byte 58 (Rim_Lighting in Nifskope) - enables subsurface shading in NifSkope</li> </ul> <p>For a mesh to be recognized as PBR, it must have in BSLightingShaderProperty:</p> <ul> <li> <p>Default shader type</p> </li> <li> <p>In Shader Flags 2 have Unused01 (or PBR) flag set</p> </li> </ul>"},{"location":"True-PBR/#general-parameters","title":"General Parameters","text":"<p>To tweak PBR settings for the mesh the following parameters of BSShaderProperty can be used:</p> <ul> <li>Specular Level (replaces Glossiness) - linear multiplier for nonmetal reflectance. Should be 0.04 for meshes which do not have specular map (and have 1 in alpha of RMAOS map) or 0.08 for meshes which have specular map created for Unreal.</li> <li>Subsurface Color (replaces Specular Color) - used in Two-Sided Foliage and Subsurface models. If subsurface map is provided it's used as linear multiplier for its RGB.</li> <li>Roughness Scale (replaces Specular Strength) - linear multiplier for roughness. The smaller the value the smoother and more reflective the texture.</li> <li>Subsurface Opacity (replaces Lighting Effect 1) - used in Subsurface model. If subsurface map is provided it's used as linear multiplier for its alpha. Higher opacity makes the effect weaker - lower opacity allows more light through the surface.</li> <li>Displacement Scale (replaces Lighting Effect 2) - linear multiplier for displacement.</li> </ul>"},{"location":"True-PBR/#batch-mesh-patching","title":"Batch mesh patching","text":"<p>To set up PBR meshes in batch, you can use ParallaxGen. Patching is useful when retexturing vanilla meshes because there are thousands of them and users might have custom mesh additions or mesh fixes using the same textures. ParallaxGen now includes functionality of PbrNifPatcher and development will continue there. Read the original PbrNifPatcher page for the description of all available properties for patching.</p>"},{"location":"True-PBR/#viewing-pbr-properties-in-nifskope-pbr-add-on","title":"Viewing PBR properties in Nifskope (PBR Add-on)","text":"<p>To get descriptions for PBR properties and correct rendering of PBR in Nifscope, add Nifskope addon for PBR into your Nifscope folder. Requires Nifskope 7, not the newer fork!</p>"},{"location":"True-PBR/#special-rendering-techniques","title":"Special rendering techniques","text":""},{"location":"True-PBR/#glint","title":"Glint","text":"<p>Glint as a rendering technique refers to the simulation of small, bright highlights or sparkles on a surface, typically due to the interaction of light with fine details or textures. These highlights are often seen on materials with very small, reflective features like glitter, polished metals, or certain fabrics. Glint effects are important in creating realistic materials in computer graphics, especially in cases where the surface has microscopic variations that cause light to scatter and reflect in a particular way.</p> <p>Parameters:</p> <ul> <li>To activate Glint use FitSlope flag</li> <li>to set glint parameters use MLP shader type  </li> <li>screen space scale is then in parallax inner layer thickness  </li> <li>log microfacet density is in parallax refraction scale  </li> <li>microfacet roughness is in parallax uv x  </li> <li>density randomization is in parallax uv y </li> <li>nif.xml in Nifskope addon for PBR has proper naming for parameters  </li> </ul> <p>Glint is incompatible with coat or fuzz, but compatible with subsurface effects.</p> Sample JSON configuration for NifPatcher <pre><code>[\n    {\n        \"texture\": \"landscape\\\\glacierslab\", \"emissive\": false, \"parallax\": true, \"subsurface_foliage\":false, \"subsurface\": true,\n        \"emissive_scale\": 0, \"vertex_colors\": false,\n        \"glint\": \n            {\n                \"screen_space_scale\": 2.0,\n                \"log_microfacet_density\": 18.0,\n                \"microfacet_roughness\": 0.7,\n                \"density_randomization\": 200.0\n            },\n        \"specular_level\" : 0.02, \"subsurface_color\": [1,1,1], \"roughness_scale\" : 1, \"subsurface_opacity\" : 1, \"displacement_scale\" : 0.2\n    }\n]\n</code></pre>"},{"location":"True-PBR/#fuzz","title":"Fuzz","text":"<p>Fuzz as a rendering technique is used to simulate the appearance of soft, fibrous materials, such as velvet, fur, peach fuzz, or certain types of cloth. This effect is crucial for rendering surfaces that have a fine layer of fibers or tiny hairs that interact with light in a distinctive way, producing a soft, diffuse reflection. For CS PBR fuzz is still considered experimental and replaces specular term with another one, better suited to model cloth (especially velvet).</p> <p>Parameters:</p> <ul> <li>enable soft lighting flag  </li> <li>to set fuzz parameters use MLP shader type  </li> <li>fuzz texture goes into slot 7 (right after rmaos). It has fuzz color in rgb (which is specular color of fuzz) and fuzz mask in alpha (0 for usual specular, 1 for fuzz specular)  </li> <li>fuzz color parameter is used as a specular color for fuzz if texture is not provided or as multiplier for color from texture. It's stored in first three parameters of MLP  </li> <li>fuzz weight parameter is used as fuzz mask if texture is not provided or as multiplier for fuzz mask for texture. It's stored in fourth parameter of MLP  </li> <li>nif.xml in Nifskope addon for PBR contains proper naming for parameters  </li> </ul> <p>Fuzz is incompatible with coat or glint, but compatible with subsurface. </p> Sample configuration <pre><code>{\n    \"coatColor\": [\n        1.0,\n        1.0,\n        1.0\n    ],\n    \"coatRoughness\": 1.0,\n    \"coatSpecularLevel\": 0.04,\n    \"coatStrength\": 1.0,\n    \"displacementScale\": 0.1,\n    \"fuzzColor\": [\n        0.0,\n        0.0,\n        0.0\n    ],\n    \"fuzzWeight\": 0.0,\n    \"glintParameters\": {\n        \"densityRandomization\": 2.128,\n        \"enabled\": true,\n        \"logMicrofacetDensity\": 12.87,\n        \"microfacetRoughness\": 0.063,\n        \"screenSpaceScale\": 0.0\n    },\n    \"innerLayerDisplacementOffset\": 0.0,\n    \"roughnessScale\": 1.0,\n    \"specularLevel\": 0.02,\n    \"subsurfaceColor\": [\n        1.0,\n        1.0,\n        1.0\n    ],\n    \"subsurfaceOpacity\": 1.0\n}\n</code></pre>"},{"location":"True-PBR/#hair-model","title":"Hair model","text":"<p>Hair model shaders are specialized rendering techniques used to simulate the appearance and behavior of hair, fur, and other similar fibrous structures in 3D graphics. CS PBR has hair model shading which is in experimental state.</p> <p>Parameters:</p> <ul> <li>To enable hair model enable back lighting flag  </li> <li>no special textures, no special parameters  </li> <li>nif.xml in Nifskope addon for PBR contains proper naming for flag  </li> </ul> <p>Hair model is a completely different shading model so incompatible with anything else. Actual character hair is still unsupported at the moment.</p>"},{"location":"True-PBR/#multilayer-parallax-wip","title":"Multilayer Parallax (WIP)","text":"<p>Multilayer Parallax (MLP) is an advanced texturing technique used in 3D rendering to create the illusion of depth on a surface without the need for complex geometry. It enhances the standard parallax mapping technique by layering multiple textures, giving the impression of a detailed 3D surface with rich depth, such as the inside of a brick wall, deep cracks, or layered materials like soil or rock.</p> <p>Parameters:</p> <ul> <li>Enabled by MultilayerParallax flag + MultilayerParallax shader type</li> <li>Coat strength - strength of coat layer contribution from 0 to 1. Equals to subsurface opacity field * alpha of slot 8 texture (if present)</li> <li>Coat roughness - roughness of coat layer. Equals to parallax inner layer thickness * alpha of slot 7 texture (if present)</li> <li>Coat specular level - reflectance of coat layer. Equals to parallax refraction scale (just set to 0.04)</li> <li>EffectLighting - enables diffuse contribution. Color of top layer is then taken from specular color field * rgb of slot 8 texture (if present)</li> <li>SoftLighting - enables interlayer parallax. I.e. with it enabled displacement works as displacement between upper and lower layer to simulate vanilla multilayer parallax</li> <li>BackLighting - enables own normal map for coat layer. It's then taken from rgb of slot 7 texture</li> </ul> Sample JSON configuration for NifPatcher <pre><code>[\n    {\n        \"texture\": \"icicle\", \"emissive\": false, \"parallax\": true, \"subsurface_foliage\":false, \"subsurface\": false, \n        \"specular_level\" : 0, \"subsurface_color\": [1,1,1], \"roughness_scale\" : 1, \"subsurface_opacity\" : 1, \"displacement_scale\" : 1.0,\n        \"multilayer\": true,\n        \"coat_strength\": 1.1,\n        \"coat_roughness\": 1.0,\n        \"coat_specular_level\": 0.02,\n        \"coat_diffuse\": true,\n        \"coat_parallax\": true,\n        \"coat_normal\": true\n    }\n]\n</code></pre>"},{"location":"True-PBR/#texture-changes","title":"Texture changes","text":""},{"location":"True-PBR/#general-textures","title":"General textures","text":"<ol> <li>Base color in RGB, opacity in A.</li> <li>Normal in RGB, A unused.</li> <li>OPTIONAL Emissive color in RGB, A unused.</li> <li>OPTIONAL Displacement in R, GBA unused.</li> <li>Unused.</li> <li>RMAOS - Roughness in R, metallic in G, AO in B, specular in A.</li> <li>OPTIONAL Multilayer normal in RGB, roughness in A.</li> <li>OPTIONAL Subsurface color in RGB, subsurface opacity in A. Multilayer coat color in RGB, opacity/strength in A.</li> </ol> <p>An overview for PBR and non-PBR textures can be found here.\\ If the actual colors are sRGB (gamma in Mixer), use sRGB flagged dds. If the actual colors are linear, use linear dds. </p>"},{"location":"True-PBR/#landscape-textures","title":"Landscape textures","text":"<p>Landscape texture is assumed to be PBR if a JSON file with the same name as the texture set record's EDID is found in 'data\\PBRTextureSets'. For 'LandscapeDirt02 [TXST:00000C0F]' it would be 'LandscapeDirt02.json' The texture paths are defined in the texture set record:</p> <ul> <li> <p>TX00: 'PBR\\Landscape\\Dirt02.dds' Base color in RGB (assumed to be in SRGB format), transparency in A.</p> </li> <li> <p>TX01: 'PBR\\Landscape\\Dirt02_n.dds' Normal in RGB, A unused.</p> </li> <li> <p>TX02: 'PBR\\Landscape\\Dirt02_rmaos.dds' RMAOS - Roughness in R, metallic in G, AO in B, specular in A.</p> </li> <li> <p>TX03: 'PBR\\Landscape\\Dirt02_g.dds' Glow in RGB, A unused. (assumed to be in SRGB format) (unused for landscape)</p> </li> <li> <p>TX04: 'PBR\\Landscape\\Dirt02_p.dds' Displacement in R, GBA unused. (use a greyscale image and save as BC4)</p> </li> <li> <p>TX05: Unused</p> </li> <li> <p>TX06: 'PBR\\Landscape\\Dirt02_crn.dds' Coat normal in RGB, coat roughness in A. (only used for multilayer parallax - not used for landscape)</p> </li> <li> <p>TX07: 'PBR\\Landscape\\Dirt02_s.dds' Subsurface colour in RGB, subsurface opacity in A (assumed to be in SRGB format); OR coat colour in RBG, coat strength in A (assumed to be in SRGB format) (both unused for landscape). Only used if the mesh has flag set \"subsurface\": true. Otherwise the texture is not needed.</p> </li> </ul> <p>Usually, your record will look like this for landscape:</p> <ul> <li> <p>TX00: 'PBR\\Landscape\\Dirt02.dds'</p> </li> <li> <p>TX01: 'PBR\\Landscape\\Dirt02_n.dds'</p> </li> <li> <p>TX02: 'PBR\\Landscape\\Dirt02_rmaos.dds'</p> </li> <li> <p>TX03: -</p> </li> <li> <p>TX04: 'PBR\\Landscape\\Dirt02_p.dds'</p> </li> </ul> <p>The JSON file contains the values that are normally defined in the mesh:</p> <pre><code>{\n    \"roughnessScale\" : 1.0,\n    \"displacementScale\" : 0.25,\n    \"specularLevel\" : 0.04,\n    \"subsurfaceColor\" : [1.0, 1.0, 1.0], (currently unused)\n    \"subsurfaceOpacity\" : \"0.1\" (currently unused)\n}\n</code></pre> <p>You can tweak the values to your needs, but be aware that landscape textures get also applied to a lot of meshes via texture set swaps - dirtcliffs, for example. In those cases, the settings in the mesh are used (and it also needs to be set up for PBR). But because many different textures are used on these meshes, your landscape textures should use similar values for parallax scale for your landscape textures. A texture that's made for a scale of 0.1 being applied to a mesh with a scale of 0.25 will have much stronger parallax than you intended.</p> <p>If any of the textures in a quad is PBR, then the entire quad is rendered as PBR. So in order to avoid issues with blending between PBR and non-PBR textures, all landscape textures in a worldspace need to be converted to PBR together. That is to be okay since mods replacing land textures usually replace them all. Also, landscape LOD will not be rendered as PBR (blends together in the distance).</p>"},{"location":"True-PBR/#texture-creation-workflow","title":"Texture Creation Workflow","text":"<p>Many programs can be used to work with PBR textures. To generate textures from scratch, you can use for example Substance Designer or Material Maker (free). To edit, mix and apply materials to meshes, you can use Quixel Mixer (free), ArmorPaint (free) or Substance Painter. In this short guide I will show the workflow I use to retexture vanilla meshes. The following workflow is based on Quixel Mixer and Chainner:</p> <ol> <li>When installing Mixer, you can select the sample packs, which contain textures you can freely use. Do NOT select the Unlimited Megascans option - it is only free if your end product is in Unreal Engine. Though do inform yourself, I am not a lawyer.</li> <li> <p>Get some free PBR textures for example from polyhaven.com or ambientcg.com, or make your own. Import them using Library -&gt; Import Custom Asset.</p> <ul> <li> <p>Make sure to fill out the correct albedo - one is for specular and one for metalness workflow. Most available textures use metalness workflow.</p> </li> <li> <p>Make sure to use the correct normal map - Mixer uses the OpenGL variant. If you use the DirectX variant, normals may look wrong in Mixer.</p> </li> <li> <p>You can add texture names to autofil in Edit -&gt; Configure Autoload Map Names</p> </li> </ul> </li> <li> <p>Edit and mix textures however you want. Mixer has official tutorials on Youtube.</p> </li> <li> <p>Export the PBR textures. You can create a preset that exports according to your needs.</p> <ul> <li> <p>Pick image format according to preference. I use PNG.</p> </li> <li> <p>Export albedo as _Albedo.png, RMAOS as _RMAOS.png, normal as _Normal.png, and displacement textures as _Displacement.png.</p> </li> <li> <p>Take note if you export albedo in Gamma or Linear space. This will be important later.</p> </li> <li> <p>You can directly export a RMAOS (roughness, metallic, ambient occlusion, specular) texture. In most cases you won't need specular and can save as RGB. </p> </li> <li> <p>If you indeed worked with opengl normal maps, set Normal Y (green channel) to be inverted. This transforms it into DirectX format which Skyrim uses.</p> </li> </ul> </li> <li> <p>Use Chainner and load the following workflow to automatically convert the textures toward the structure Skyrim needs them. In the workflow on the left side select the directory where you exported the textures via Mixer and enter the name used for the output. Please note, if you exported your albedo as Gamma, you need to select compression with sRGB. This is the 'Save Image' node in the topright corner of the workflow. Optionally change percentages of Resize nodes to downscale your textures before saving.</p> </li> </ol>"},{"location":"True-PBR/#faq","title":"FAQ","text":"What about Complex Materials? <p>Complex materials are totally separate from True PBR and there would be no point in combining them. You can still use complex materials on non-pbr objects as usual.</p> Can I convert vanilla shaded textures to True PBR? <p>If you originally had PBR textures that you somehow converted for Skyrim, you can use those easily. Otherwise it is impossible to do without assumptions, because Skyrim textures contain fundamentally different data. For example, many objects using enviornment mapping are metallic, but not all of them. You can do manual work or use some AI to make the necessary textures, but it is unlikely that it will be a meaningful visual improvement over vanilla.</p> My materials ingame look wrong? <p>There is many possibilities for this, I will list the common ones:</p> <ol> <li>If the material is really shiny, the mesh probably isn't marked for PBR, so it is vanilla shaded with specularity.</li> <li>If the material is too dark in the shadows, you might have too dark ambient occlusion. If the material gets black when you walk to it with a torch, your normal maps might be wrong - either flipped, or wrong format (opengl).</li> </ol> About Texture Compression <p>There is a number of compression format for DDS textures with various properties such as number of channels, quality and file size. Not all of them are supported by Skyrim. The following list should be sufficient in most situations:</p> <ul> <li>BC1: RGB + 1bit alpha (fully opaque or fully transparent). It has reasonable file size and quality. Use for opaque or cutout albedo textures, and RMAOS textures if you don't need specular. In case of visible banding or squarish artifacts, use BC7.</li> <li>BC4: One channel (grayscale). Has the same file size as BC1, but only one channel with better quality. Use for parallax textures.</li> <li>BC7: RGBA. Has good quality and twice the file size of BC1. Use for normal maps and albedo with full transparency.</li> <li>BC3: RGBA. The RGB part uses BC1, alpha uses BC4. The file size is the same as BC7. This can be useful when you need to preserve a quality alpha channel, for example in complex materials or landscape textures with parallax in alpha channel.</li> </ul> <p>For more details I recommend this article.</p> Linear vs sRGB because it bears repeating <ul> <li>You can find discussions online about linear, sRGB, non-color data etc. The details are above my paygrade, here we just hope that stuff works.</li> <li>Extremely simplified: Math is easier with linear data, but using sRGB files allows them to store more detail human eyes can actually see (this only makes sense for colors).</li> <li>All non-color data such as normals or roughness should be flagged as linear when saving to dds.</li> <li>Color data is more complicated - you need to know whether the data (the colors) itself is in sRGB or linear space. AFAIK, albedo/diffuse textures from sites like polyhaven are in sRGB and it is more common on general. If this is the case, you should use the sRGB flag when saving to dds. The flag will allow to the texture to be converted to linear automatically on the gpu. If your data (the colors) is already in linear space, use the linear flag when saving to dds. As you can imagine, if you use the wrong flag, the texture will either be superfluously transformed to linear or not transformed when it should be, which will cause the texture to look wrong.</li> <li>BUT WAIT! That applies to True PBR. If you are making textures for vanilla Skyrim... make sure your data is sRGB and it uses the linear flag. WHAT? Skyrim uses linear-flagged dds that actually contain sRGB data. I'm not sure if they convert the colors to linear manually in shaders or just calculate lighting in sRGB space. So yes, it is weird but it works this way (blame Bethesda).</li> </ul> Do I use RMAOS or RMAO textures? <p>You use the specular layer for surfaces like glass, gems, perhaps snow. If there is only one type of surface in your texture you can use RMAO and set the specular scale in the nif/json configuration. If you have different surfaces with specular properties, only then it makes sense to use rmaos with a specular map in the alpha channel.</p> What is the best way to adjust parallax scale? <p>If you want to change the parallax scale of your texture because it looks to flat instead of changing the displacement map better try to adjust parallax scale in the json for the nif patcher. This usually creates good results.</p> Is there any best practice for defining the specular maps and strength? <p>Most materials should use the default value of 0.04 (in the mesh &amp; json settings). That means your alpha would be white and you can save the texture as BC1. Snow has half the specular strength of most other stuff, so you could use a full 128 grey image for the alpha channel or reduce the specular strength in the json &amp; patcher files to 0.02</p>"},{"location":"VR-Developer-Notes/","title":"VR Developer Notes","text":""},{"location":"VR-Developer-Notes/#vr-hlsl-porting","title":"VR HLSL porting","text":"<p>VR porting assumes that the flat shader has been reversed already and exists in CS for flat. We typically do not RE or port for VR first due to the added complexity.</p> <ol> <li>Use <code>Advanced -&gt; Dump Shaders</code> to dump all shaders for Flat/VR on startup. It will end up in <code>data\\ShaderDump</code>.</li> <li>Use 3dmigito's decompiler on all the .bin shaders to get hlsl. We have a script <code>Skyrim_Disassemble_Shaders</code> that we haven't posted yet that will crawl all of the bin files. (ask on discord)</li> <li> <p>Check cbuffers vs flat. Same size should be fine. Search this regex (VSCode escaped) in VR will identify eyeIndex based buffers. <code>cb[0-9]+\\[([^\\]]+\\+)+\\w+\\]</code>. Compare against flat files for same cb (non regex). For example, </p> <p><pre><code>//FLAT\n  r1.xyzw = float4(0,0,0,1) * cb12[8].wwww;\n//VR\n  r2.xyzw = cb12[r0.z+16].wwww * float4(0,0,0,1);\n</code></pre> These are essentially the same buffer access of cb12. The addition order doesn't matter, and the additional index of <code>r0.z</code> is basically <code>eyeIndex</code>. The offset of <code>+ 16</code> shows that the variable at <code>packoffset(c8)</code> in flat is actually <code>packoffset(c16)</code> in VR. This is due to the fact we're in a set of arrays that use eyeIndex. Specifically, this matches what we've determined here: /package/Shaders/Common/FrameBuffer.hlsl#L6.</p> <p>Update the CS flat hlsl to use the right VR cbuffers. Use the define <code>VR</code> for VR specific code.</p> </li> <li> <p>On identifying eyeIndex based cbuffers, edit the CS flat hlsl that you are porting to now use the eyeIndex.</p> </li> <li>Fix stereoUV coords. VR renders both left and right eye at the same time vs flat which is a single eye. So certain coords in flat UV space may need to be converted to stereoUV. <code>Depthtexture</code> is a prime example. See other examples. Keep track of the coordinate system acccessing the texture. For example UV or texcoord (in compute shaders) will need to be stereo.</li> </ol> <p>Helpful VR functions can be found in /package/Shaders/Common/VR.hlsli</p>"}]}